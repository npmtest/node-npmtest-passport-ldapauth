{"/home/travis/build/npmtest/node-npmtest-passport-ldapauth/test.js":"/* istanbul instrument in package npmtest_passport_ldapauth */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-ldapauth/lib.npmtest_passport_ldapauth.js":"/* istanbul instrument in package npmtest_passport_ldapauth */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_passport_ldapauth = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_passport_ldapauth = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-ldapauth/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-passport-ldapauth && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_passport_ldapauth */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_passport_ldapauth\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_passport_ldapauth.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_passport_ldapauth.rollup.js'] =\n            local.assetsDict['/assets.npmtest_passport_ldapauth.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_passport_ldapauth.__dirname + '/lib.npmtest_passport_ldapauth.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-ldapauth/node_modules/passport-ldapauth/lib/passport-ldapauth/index.js":"var Strategy = require('./strategy');\n\n// Export directly from package since there is nothing else to export\nexports = module.exports = Strategy;\n\n// Export constructor like before for compatibility\nexports.Strategy = Strategy;\n","/home/travis/build/npmtest/node-npmtest-passport-ldapauth/node_modules/passport-ldapauth/lib/passport-ldapauth/strategy.js":"\"use strict\";\n\n/**\n * Passport wrapper for ldapauth\n */\nvar passport = require('passport-strategy'),\n    LdapAuth = require('ldapauth-fork'),\n    util     = require('util');\n\n/**\n * Strategy constructor\n *\n * The LDAP authentication strategy authenticates requests based on the\n * credentials submitted through an HTML-based login form.\n *\n * Applications may supply a `verify` callback which accepts `user` object\n * and then calls the `done` callback supplying a `user`, which should be set\n * to `false` if user is not allowed to authenticate. If an exception occured,\n * `err` should be set.\n *\n * Options:\n * - `server`  options for ldapauth, see https://github.com/trentm/node-ldapauth\n * - `usernameField`  field name where the username is found, defaults to _username_\n * - `passwordField`  field name where the password is found, defaults to _password_\n * - `passReqToCallback`  when `true`, `req` is the first argument to the verify callback (default: `false`)\n *\n * Options can be also given as function that accepts a callback end calls it\n * with error and options arguments. Notice that the callback is executed on\n * every authenticate call.\n *\n * Example:\n *\n *     var LdapStrategy = require('passport-ldapauth').Strategy;\n *     passport.use(new LdapStrategy({\n *         server: {\n *           url: 'ldap://localhost:389',\n *           bindDn: 'cn=root',\n *           bindCredentials: 'secret',\n *           searchBase: 'ou=passport-ldapauth',\n *           searchFilter: '(uid={{username}})',\n *           reconnect: true\n *         }\n *       },\n *       function(user, done) {\n *         return cb(null, user);\n *       }\n *     ));\n */\nvar Strategy = function(options, verify) {\n  // We now accept function as options as well so we cannot assume anymore\n  // that a call with a function parameter only would have skipped options\n  // and just provided a verify callback\n  if (!options) {\n    throw new Error('LDAP authentication strategy requires options');\n  }\n\n  this.options    = null;\n  this.getOptions = null;\n\n  if (typeof options === 'object') {\n    this.options = setDefaults(options);\n  } else if (typeof options === 'function') {\n    this.getOptions = options;\n  }\n\n  passport.Strategy.call(this);\n\n  this.name   = 'ldapauth';\n  this.verify = verify;\n};\n\nutil.inherits(Strategy, passport.Strategy);\n\n/**\n * Add default values to options\n *\n * @param options\n * @returns {*}\n */\nvar setDefaults = function(options) {\n  options.usernameField || (options.usernameField = 'username');\n  options.passwordField || (options.passwordField = 'password');\n  return options;\n};\n\n/**\n * Get value for given field from given object. Taken from passport-local,\n * copyright 2011-2013 Jared Hanson\n */\nvar lookup = function (obj, field) {\n  var i, len, chain, prop;\n  if (!obj) { return null; }\n  chain = field.split(']').join('').split('[');\n  for (i = 0, len = chain.length; i < len; i++) {\n    prop = obj[chain[i]];\n    if (typeof(prop) === 'undefined') { return null; }\n    if (typeof(prop) !== 'object') { return prop; }\n    obj = prop;\n  }\n  return null;\n};\n\n/**\n * Verify the outcome of caller verify function - even if authentication (and\n * usually authorization) is taken care by LDAP there may be reasons why\n * a verify callback is provided, and again reasons why it may reject login\n * for a valid user.\n */\nvar verify = function() {\n  // Callback given to user given verify function.\n  return function(err, user, info) {\n    if (err)   return this.error(err);\n    if (!user) return this.fail(info);\n    return this.success(user, info);\n  }.bind(this);\n};\n\n/**\n * Execute failureErrorCallback if provided\n */\nvar handleErrorAsFailure = function(err) {\n  if (typeof this.options.failureErrorCallback === 'function') {\n    this.options.failureErrorCallback(err);\n  }\n  return this.fail(err, 500);\n};\n\n/**\n * Options (passed when calling `passport.authenticate()`):\n * - `badRequestMessage`  flash message for missing username/password\n *                        (default: 'Missing credentials')\n * - `invalidCredentials`  flash message for InvalidCredentialsError, NoSuchObjectError,\n *                         and /no such user/ LDAP errors\n *                         (default: 'Invalid username/password')\n * - `userNotFound`  flash message when LDAP returns no error but also no user\n *                   (default: 'Invalid username/password')\n * - `constraintViolation`  flash message when user account is locked\n *                          (default: 'Exceeded password retry limit, account locked')\n */\nvar handleAuthentication = function(req, options) {\n  var username, password, ldap, errorHandler;\n  options || (options = {});\n\n  if (typeof this.options.credentialsLookup === 'function') {\n    var credentials = this.options.credentialsLookup(req);\n    if (credentials != null) {\n      // name and pass as a courtesy for those who use basic-auth directly as\n      // they're likely the main user group.\n      username = credentials.username || credentials.name;\n      password = credentials.password || credentials.pass;\n    }\n  } else {\n    username = lookup(req.body, this.options.usernameField) || lookup(req.query, this.options.usernameField);\n    password = lookup(req.body, this.options.passwordField) || lookup(req.query, this.options.passwordField);\n  }\n\n  if (!username || !password) {\n    return this.fail({message: options.badRequestMessage || 'Missing credentials'}, 400);\n  }\n\n  errorHandler = this.options.handleErrorsAsFailures === true ? handleErrorAsFailure.bind(this) : this.error.bind(this);\n\n  /**\n   * AD possible messages\n   * http://www-01.ibm.com/support/docview.wss?uid=swg21290631\n   */\n  var messages = {\n    '530': options.invalidLogonHours || 'Not Permitted to login at this time',\n    '531': options.invalidWorkstation || 'Not permited to logon at this workstation',\n    '532': options.passwordExpired || 'Password expired',\n    '533': options.accountDisabled || 'Account disabled',\n    '534': options.accountDisabled || 'Account disabled',\n    '701': options.accountExpired || 'Account expired',\n    '773': options.passwordMustChange || 'User must reset password',\n    '775': options.accountLockedOut || 'User account locked',\n    default: options.invalidCredentials || 'Invalid username/password'\n  };\n\n  ldap = new LdapAuth(this.options.server);\n  ldap.on('error', errorHandler);\n  ldap.authenticate(username, password, function(err, user) {\n    ldap.close(function(){}); // We don't care about the closing\n\n    if (err) {\n      // Invalid credentials / user not found are not errors but login failures\n      if (err.name === 'InvalidCredentialsError' || err.name === 'NoSuchObjectError' || (typeof err === 'string' && err.match(/no such user/i))) {\n        var message = options.invalidCredentials || 'Invalid username/password';\n\n        if(err.message) {\n          var ldapComment = err.message.match(/data ([0-9a-fA-F]*), v[0-9a-fA-F]*/);\n          if(ldapComment && ldapComment[1]){\n            message = messages[ldapComment[1]] || messages['default'];\n          }\n        }\n        return this.fail({message: message}, 401);\n      }\n      if (err.name === 'ConstraintViolationError'){\n        return this.fail({message: options.constraintViolation || 'Exceeded password retry limit, account locked'}, 401);\n      }\n\n      // Other errors are (most likely) real errors\n      return errorHandler(err);\n    }\n\n    if (!user) return this.fail({message: options.userNotFound || 'Invalid username/password'}, 401);\n\n    // Execute given verify function\n    if (this.verify) {\n      if (this.options.passReqToCallback) {\n        return this.verify(req, user, verify.call(this));\n      } else {\n        return this.verify(user, verify.call(this));\n      }\n    } else {\n      return this.success(user);\n    }\n  }.bind(this));\n};\n\n/**\n * Authenticate the request coming from a form or such.\n */\nStrategy.prototype.authenticate = function(req, options) {\n  if ((typeof this.options === 'object') && (!this.getOptions)) {\n    return handleAuthentication.call(this, req, options);\n  }\n\n  var callback = function(err, configuration) {\n    if (err) return this.fail(err);\n\n    this.options = setDefaults(configuration);\n    handleAuthentication.call(this, req, options);\n  };\n\n  // Added functionality: getOptions can accept now up to 2 parameters\n  if (this.getOptions.length ===1) { // Accepts 1 parameter, backwards compatibility\n    this.getOptions(callback.bind(this));\n  } else { // Accepts 2 parameters, pass request as well\n    this.getOptions(req, callback.bind(this));\n  }\n};\n\nmodule.exports = Strategy;\n","/home/travis/build/npmtest/node-npmtest-passport-ldapauth/node_modules/passport-ldapauth/foo.js":"var foo = function() {\n  return {keke :1};\n};\n\nfoo.fetchPlop = function() {\n  return {paska: 2};\n};\n\nconsole.log(foo(), foo.fetchPlop());\n"}